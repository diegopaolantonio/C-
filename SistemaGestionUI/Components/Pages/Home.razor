@page "/"
@inject NavigationManager NavigationManager
@inject LoginService Service
@inject UsuariosService usuariosService
@inject ILocalStorageService LocalStorage

<PageTitle>Home</PageTitle>

@if(Message != null)
{
    @if(usuarioLoggeado == null)
    {
        <h1>Realizar login</h1>
        <div class="input-group mb-3">
            <div class="input-group mb-3">
                <label for="email">Email</label>
                <input type="email" class="form-control" placeholder="email..." @bind="email" />
            </div>
            <div class="input-group mb-3">
                <label for="password">Password</label>
                <input type="password" class="form-control" placeholder="password..." @bind="password" />
            </div>

            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => LoginSubmit(email, password))">Aceptar</button>
        </div>
    }
    else
    {
        <h1>Hola, @usuarioLoggeado.NombreUsuario</h1>
        <div class="input-group mb-3">
            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => LogoutSubmit(usuarioLoggeado.Id))">Logout</button>
        </div>
    }
}

@code {

    public string email = string.Empty;
    public string password = string.Empty;
    public List<Login> loginList = [];
    Login? usuarioLoggeado = null;
    private string Token;
    private string Message;

    protected override async Task OnInitializedAsync() { }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Token = await Service.GetTokenAsync();

            Message = string.IsNullOrEmpty(Token)
                ? "No se encontró ningún token."
                : "Token encontrado";

            if (Token != null && Token != string.Empty)
            {
                loginList = await Service.GetLoginBy(Token);

                if (loginList.Count != 0)
                {
                    foreach (Login login in loginList)
                    {
                        usuarioLoggeado = login;
                    }
                }
                if (usuarioLoggeado != null)
                {
                    Console.WriteLine(usuarioLoggeado.Email);
                }
                else
                {
                    await LocalStorage.RemoveItemAsync("authToken");
                }
            }

            StateHasChanged();
        }
    }

    public async Task LogoutSubmit(int id)
    {
        await Service.DeleteLogin(id);
        usuarioLoggeado = null;

        await LocalStorage.RemoveItemAsync("authToken");

        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    public async Task LoginSubmit(string email, string password)
    {
        List<Usuario> usuarios = await usuariosService.GetUsuarios();
        Login loginActual = new Login();
        List<Login> usuariosLoggeados = [];
        foreach(var usuario in usuarios)
        {
            if (usuario.Email == email && usuario.Contraseña == password)
            {
                loginActual.UsuarioId = usuario.Id;
                loginActual.Nombre = usuario.Nombre;
                loginActual.Apellido = usuario.Apellido;
                loginActual.NombreUsuario = usuario.NombreUsuario;
                loginActual.Email = usuario.Email;
                loginActual.FechaLogin = DateTime.Now;
                var token = await Service.InsertLogin(loginActual);

                usuariosLoggeados = await Service.GetLoginBy(token);
            }
        }
        foreach (var usuario in usuariosLoggeados)
        {
            usuarioLoggeado = usuario;

            await LocalStorage.SetItemAsStringAsync("authToken", usuarioLoggeado.token);

            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        if(usuarioLoggeado == null)
        {
            Console.WriteLine("Usuario no encontrado");
        }
    }
}